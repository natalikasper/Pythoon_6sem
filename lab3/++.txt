import matplotlib.pyplot as plt
import numpy as np
import mglearn

# ------- 2КЛАССОВАЯ КЛАССИФИКАЦИЯ ---------
# генерируем синтетический(выдуманный) набор данных forge
# forge имеет 2 признака
X, y = mglearn.datasets.make_forge()

# строим график для набора данных
# к.точка представлена в виде одного маркера
# цвет и форма маркера - класс, к которому принадлежит точка
# 1 признак - по оси х, второй - по оси у
mglearn.discrete_scatter(X[:, 0], X[:, 1], y)
plt.legend(["Класс 0", "Класс 1"], loc=4)
plt.xlabel("Первый признак")
plt.ylabel("Второй признак")
# массив сост.из 25 точек д-х и 2 признаков
print("форма массива X: {}".format(X.shape))
plt.show()


# ------РЕГРЕССИЯ---------
# исп.синтетический набор wave
# wave им.1вх.признак и непрерыв.целевую пер-ную (отклик), кот мы хотим смоделир
# ось x - единственный признак
# ось y - целевая пер-ная (отклик)
X, y = mglearn.datasets.make_wave(n_samples=40)
plt.plot(X, y, 'o')
plt.ylim(-3, 3)
plt.xlabel("Признак")
plt.ylabel("Целевая переменная")
plt.show()


# --------
# исп.синентический набор по раку молочной железы (cancer)
# к.опухоль обозн.как доброкач (benign) или злокач.(malignant)
# задача - дать проноз является ли опухоль злокач.

# load_breast_cancer - загрузка данных из модуля .. библиотеки
# объект возвращает значение типа bunch (словарь (ключи и значения))
from sklearn.datasets import load_breast_cancer
cancer = load_breast_cancer()
print("Ключи cancer(): \n{}".format(cancer.keys()))

# форма - shape
# набор включает 569 точек и 30 признаков
print("Форма массива data для набора cancer: {}".format(cancer.data.shape))

# признак опухли + кол-во
# Из 569 т.д-х 212 помечены как злокач., 357 - доброкач.
print("Количество примеров для каждого класса:\n{}".format(
    {n: v for n, v in zip(cancer.target_names, np.bincount(cancer.target))}))

# получить краткое описание каждого признака
print("Имена признаков:\n{}".format(cancer.feature_names))

# получить полное описание признаков
print(cancer.DESCR)


# ------РЕГРЕССИЯ С РЕАЛЬНЫМ НАБОРОМ ДАННЫХ----
# boston housing
# задача - спрогнозировать медианную стоимость домов в неск.районах
#     на основе ур-ня преступности, близости в реке, удаленности от магистралей

# load_boston - загрузить реальный набор данных
from sklearn.datasets import load_boston
boston = load_boston()
# форма - shape
# набор данных содержит 506 т.д-х и 13 признаков
print("форма массива data для набора boston: {}".format(boston.data.shape))

# получить подробную инфу
print(boston.DESCR)

# будем учитывать не только 13 признаков, но и взаимодействие между ними
# т.е.не только признаки по отдельности, но и их взаимодействие

# load_extended_boston - загрузить набор производных признаков
# 104 признака (13 исходных + 91 производный)
X, y = mglearn.datasets.load_extended_boston()
print("форма массива X: {}".format(X.shape))


# ----МЕТОД К БЛИЖАЙШИХ СОСЕДЕЙ
# самый простой алгоритм машинного обучения
# построение модели = запоминание обуч.набора данных
# чтобы сделать прогноз новой т => нах.ближ.соседей обуч.набора

# в прост.варианте есть 1 сосед => выбир т., кот ближе всего расположена к нашей
# алгоритм ближайшего соседа для набора д-х forge

# добавили 3 новые точки д-х, кот показаны в виде звездочек
# для к.точки отметили ближ.точку обуч.набора.
# прогноз - метка точки (показана цветом маркера)
mglearn.plots.plot_knn_classification(n_neighbors=1)
plt.show()

# с.указать k соседей
# для присвоения метки исп-ся голосование
#   т.е.для к.т.тест.набора мы подсчит.кол-во соседей, кот.относ к класс /
#   затем присваиваем наиб.часто встреч.класс нашей т.
#       т.е.выбираем класс, кот набрал большинство среди соседей
mglearn.plots.plot_knn_classification(n_neighbors=3)
plt.show()


#-----алгоритм ближ.соседей исп-я scikit-lear---
# разделим наши д-е на обуч.и тест набор, чтобы оценить обобщ.спос.модели
from sklearn.model_selection import train_test_split
X, y = mglearn.datasets.make_forge()
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

# вып-ем импорт и создаем объект-экзмепляр класса, задавая пар-ры (кол-во соседей)
from sklearn.neighbors import KNeighborsClassifier
clf = KNeighborsClassifier(n_neighbors=3)

# подгоняем классификатор, исп-я обуч.набор (обучаем)
#   т.е.запоминаем набор данных для того, чтобы вычислить соседей в ходе прогноза
print(clf.fit(X_train, y_train))

# predict - получить прогнозы для тестовых данных
print("Прогнозы на тестовом наборе: {}".format(clf.predict(X_test)))

# score(тест.д-е, тест.метки) - для оценки обобщающей способности модели
# правильность 86% => модель правильно предсказала класс для 86% примеров тест.набора
print("Правильность на тестовом наборе: {:.2f}".format(clf.score(X_test, y_test)))

# -----АНАЛИЗ KNeighborsClassifier
# для 2мерных массивов мы м.показать прогнозы для всех возм.точек тест.набора
#   разместив их в плоскости ху

# мы зададим цвет плоскости в соотв.с тем классов, кот.будет присвоен этой обл.
#   это позволит сформир.границу принятия решений, кот разбив.плоскость на 2 обл:
#       1 - где алг.присваивает класс 0, 2 - где алг.присваивает класс 1
fig, axes = plt.subplots(1, 3, figsize=(10, 3))
# визуализ.границы для 1,3,9 соседей

# для 1 соседа:
# граница принятия решений согласуется с обуч.данными на все 100

# если соседей больше:
# все прогнозы будут одинак (для 3 и 9 соседей): будет выбран класс, кот.явл.
#   наиб.часто встречающимся в наборе
for n_neighbors, ax in zip([1, 3, 9], axes):
# создаем объект-классификатор и подгоняем в одной строке
 clf = KNeighborsClassifier(n_neighbors=n_neighbors).fit(X, y)
 mglearn.plots.plot_2d_separator(clf, X, fill=True, eps=0.5, ax=ax, alpha=.4)
 mglearn.discrete_scatter(X[:, 0], X[:, 1], y, ax=ax)
 ax.set_title("количество соседей:{}".format(n_neighbors))
 ax.set_xlabel("признак 0")
 ax.set_ylabel("признак 1")
axes[0].legend(loc=3)
plt.show()


# ----ЕСТЬ ЛИ СВЯЗЬ МЕЖДУ СЛОЖНОСТЬЮ МОДЕЛИ И ОБОБЩ,СПОСОБНОСТЬЮ?---
# исп-ем реальный набор д-х Breast Cancer
# разобьем д-е на обучающий и тестовый наборы
from sklearn.datasets import load_breast_cancer
cancer = load_breast_cancer()
X_train, X_test, y_train, y_test = train_test_split(
 cancer.data, cancer.target, stratify=cancer.target, random_state=66)

# оценим качество работы модели на этих наборах с исп-ние разн.кол-ва соседей
training_accuracy = []
test_accuracy = []
# пробуем n_neighbors от 1 до 10
neighbors_settings = range(1, 11)

# 1 сосед - идеальная правильность на обуч.наборе
# больше - модель проще и правильность на обуч.наборе падает
#   => исп-ние 1 соседа приводит к построение слишком сложной модели
#   => исп-ние 10 сосед.приводит к тому что модель стан.слишком простой и раб.еще хуж
for n_neighbors in neighbors_settings:
 # строим модель
 clf = KNeighborsClassifier(n_neighbors=n_neighbors)
 clf.fit(X_train, y_train)
 # записываем правильность на обучающем наборе
 training_accuracy.append(clf.score(X_train, y_train))
 # записываем правильность на тестовом наборе
 test_accuracy.append(clf.score(X_test, y_test))
plt.plot(neighbors_settings, training_accuracy, label="правильность на обучающем наборе")
plt.plot(neighbors_settings, test_accuracy, label="правильность на тестовом наборе")
plt.ylabel("Правильность")
plt.xlabel("количество соседей")
plt.legend()
plt.show()

# ------РЕГРЕССИЯ k БЛИЖАЙШИХ СОСЕДЕЙ
# исп.набор д-хх wave
# добавили 3 точки тест.набора в виде * по оси х
# прогноз с исп-нием 1 соседа - целевое значение ближ.соседа
mglearn.plots.plot_knn_regression(n_neighbors=1)
plt.show()

# исп-ем нес.соседей
# прогноз - среднее знач.соотв.соседей
mglearn.plots.plot_knn_regression(n_neighbors=3)
plt.show()

# алгоритм регрессия к ближ.соседей реализ.в классе
from sklearn.neighbors import KNeighborsRegressor
X, y = mglearn.datasets.make_wave(n_samples=40)
# разбиваем набор данных wave на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
# создаем экземпляр модели и устанавливаем количество соседей равным 3
reg = KNeighborsRegressor(n_neighbors=3)
# подгоняем модель с использованием обучающих данных и обучающих ответов
print(reg.fit(X_train, y_train))

# получим прогнозы для тестового набора
print("Прогнозы для тестового набора:\n{}".format(reg.predict(X_test)))

# качество модели, кот.возвращ.знач R^2 (коэф.детерминации)
#   кот.мб от 0 до 1
#       1 - идеальная прогноз.способность
#       0 - const, кот предсказывает ср.знач.ответов в обуч.наборе y_train
# 0.83 - относительно хорошее кач-во подгонки модели
print("R^2 на тестовом наборе: {:.2f}".format(reg.score(X_test, y_test)))

# ------АНАЛИЗ МОДЕЛИ KNEI..REGRESSOR
# м.увидеть прогнозы всех возм.знач.признаков
# создаем тест.набор + визуализ.получ.линии прогнозов
fig, axes = plt.subplots(1, 3, figsize=(15, 4))
# создаем 1000 точек данных, равномерно распределенных между -3 и 3
line = np.linspace(-3, 3, 1000).reshape(-1, 1)
for n_neighbors, ax in zip([1, 3, 9], axes):
 # получаем прогнозы, используя 1, 3, и 9 соседей
 reg = KNeighborsRegressor(n_neighbors=n_neighbors)
 reg.fit(X_train, y_train)
 ax.plot(line, reg.predict(line))
 ax.plot(X_train, y_train, '^', c=mglearn.cm2(0), markersize=8)
 ax.plot(X_test, y_test, 'v', c=mglearn.cm2(1), markersize=8)

 ax.set_title(
 "{} neighbor(s)\n train score: {:.2f} test score: {:.2f}".format(
 n_neighbors, reg.score(X_train, y_train),
 reg.score(X_test, y_test)))
 ax.set_xlabel("Признак")
 ax.set_ylabel("Целевая переменная")
axes[0].legend(["Прогнозы модели", "Обучающие данные/ответы", "Тестовые данные/ответы"], loc="best")
# 1 сосед - к.т.обуч.набора им.очевидное влияние на прогнозы
#   предсказ.значч проходят через все точки д-х => неустойчивые прогнозы
# больше - получние сглаженных прогнозов, но снижается правильность подгонки
plt.show()
