import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
iris_dataset = load_iris()
X_train, X_test, y_train, y_test = train_test_split(
    iris_dataset['data'], iris_dataset['target'], random_state=0)

# ------------------ЛАБА 2-------------
# алгоритм класиф.на осн.м.ближ.соседей реализ.в классификаторе KNeighorsClassifier
# создаем экзмепляр класса (с пом.задания пар-ров модели)
# самый важный пар-р - количество соседей (1)
# knn включ.в себя алгоритм, кот.будет исп-ся для постр.модели на обуч.д-х, а также
# алг., кот.сгенерирует прогнозы новых точек д-х + хранит обуч.набор д-х.
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1)

# fit - возвращ.сам объект knn и измен.его => строкое представ.нашего классификатора
# показ.какие пар-ры были исп-ны при созд.модели + наш пар-р 1.
print(knn.fit(X_train, y_train))

# получить прогнозы. Допусти, если ирис с такими хар-ками
# к какому сорту привести цветок? => поместить д-е в массив numpy, вычислить форму массива
# форма массива = кол-во примеров * на колва признаков (1*4)
X_new = np.array([[5, 2.9, 1, 0.2]])
print("форма массива X_new: {}".format(X_new.shape))

# получить прогнозы - метод predict объекта knn
# принадлежит к классу 0 => сорт setosa
prediction = knn.predict(X_new)
print("Прогноз: {}".format(prediction))
print("Спрогнозированная метка: {}".format(iris_dataset['target_names'][prediction]))

# правильно ли?
# сравниваем прогноз для к.ириса в тестовом наборе и сравн.его с факт.меткой (уже изв.сорт)
y_pred = knn.predict(X_test)
print("Прогнозы для тестового набора:\n {}".format(y_pred))

# 1)правильность
# м.оценить кач-во модели, вычислив правильность - процент цветов, для кот.модель правильного спрогноз.сорта
print("Правильность на тестовом наборе: {:.2f}".format(np.mean(y_pred == y_test)))

# 2) правильность
# м.исп-ть метод score, кот вычисл правильность тестового набора
print("Правильность на тестовом наборе: {:.2f}".format(knn.score(X_test, y_test)))
# 0,97 => 97%
# => м.применить нашу модель (с пом.метода fit построенную) к новым д-м
